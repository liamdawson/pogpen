<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Playbook</title>
    <script src="default.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Roboto|Roboto+Condensed|Roboto+Mono" rel="stylesheet">
    <style>
        html, body {
            margin: 0;
            padding: 0;
            min-height: 100%;
            background: #efefff;
        }
        * {
            box-sizing: border-box;
            font-family: 'Roboto', sans-serif;
        }
        code, kbd, pre {
            font-family: 'Roboto Mono', monospace;
        }
        div.parameters-config {
            width: 30vw;
            height: 100%;
            background: #fff;
            position: fixed;
            overflow-y: scroll;
        }
        div.parameters-config label input {
            display: block;
            width: 100%;
            font-family: 'Roboto Mono', monospace;
            padding: 0.5ex 1em;
            border: 1px solid #233;
            border-radius: 4px;
            margin-bottom: 1em;
        }
        section.playbook-content {
            margin-left: 30vw;
            min-height: 100%;
            overflow-x: hidden;
        }
        div.parameters-config, section.playbook-content {
            padding: 2ex 2em;
        }
        h1, h2, h3, h4, h5, h6 {
            margin: 0;
            margin-bottom: 0.5ex;
            padding: 0;
            padding-bottom: 0.5ex;
            font-family: 'Roboto Condensed', serif;
            font-weight: normal;
            letter-spacing: -0.5px;
            border-bottom: 1px solid #ddd;
        }
        code {
            color: #a22;
        }
        pre {
            width: 100%;
            overflow-x: auto;
            border-radius: 4px;
            padding: 1ex 1em;
            background-color: #233;
        }
        pre>code {
            color: #eee;
            border: none;
            background: transparent;
            padding: none;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.10/handlebars.min.js"></script>
    <script>
        playbook = {
            parameters: {
                {{#each parameters}}
                "{{id}}": {
                    name: "{{name}}",
                    value: "{{value}}"
                },
                {{/each}}
                "internal-pogpen-unused-hack": {}
            }
        };

        window.updatePlaybookParameter = function (target) {
            playbook.parameters[target.id.substring(6)].value = target.value;
            render();
        };

        Handlebars.registerHelper('parameterValue', function (id) {
            return playbook.parameters[id].value;
        });

        Handlebars.registerHelper('parameterName', function (id) {
            return playbook.parameters[id].name;
        });
    </script>
    <script id="content-template" type="text/x-handlebars-template">
        {{{content}}}
    </script>
</head>
<body>
    <div class="parameters-config" id="parameters-config">
        <h3>Parameters</h3>
        {{#each parameters}}
        <label>
            {{name}}
            <input type="{{param_field_type}}" value="{{value}}" id="param-{{id}}" oninput="updatePlaybookParameter(this)">
        </label>
        {{/each}}
    </div>
    <section id="playbook-content" class="playbook-content">
    </section>
    <script>
        var paramsContainer = document.getElementById("parameters-config");
        var labels = paramsContainer.getElementsByTagName("label");
        var mappings = Array.prototype
            .map.bind(labels)(label => {
                var inputs = label.getElementsByTagName("input");
                if (inputs.length > 0)
                {
                    var input = inputs[0];
                    return [input.id.substring(6), input.value];
                }
                return [];
            })
            .filter(pair => pair.length > 0)
            .forEach(pair => playbook.parameters[pair[0]].value = pair[1]);

        function render() {
            var source = document.getElementById("content-template").innerHTML;
            var target = document.getElementById("playbook-content");
            target.innerHTML = Handlebars.compile(source)({});
        }

        render();
    </script>
</body>
</html>